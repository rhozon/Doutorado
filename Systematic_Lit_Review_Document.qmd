---
title: "Systematic Literature Review: Multiobjective Portfolio"
author: "Rodrigo Hermont Ozon"
date: "Last Update: `r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
    self-contained: true
    toc: true
    code-fold: true
    df-print: paged
editor: visual
---

```{r}

start_time <- Sys.time()

```

```{css toc-content, echo = FALSE}

#TOC {
  left: 220px;
  margin: 50px 30px 55px 30px;
}

.main-container {
    margin-left: 300px;
}

```

```{r setup, include=FALSE}

knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE,
	comment = NA
)
knitr::opts_chunk$set(comment = NA)    # Remove all coments # of R outputs
knitr::opts_chunk$set(warning = FALSE) # Remove all warnings # of R outputs
knitr::opts_chunk$set(message = FALSE) # Remove all messages # of R outputs

```

------------------------------------------------------------------------

```{=html}
<style>
p.comment {
background-color: #DBDBDB;
padding: 10px;
border: 1px solid black;
margin-left: 25px;
border-radius: 5px;
font-style: italic;
}

</style>
```
::: {.alert .alert-info}
<strong> Systematic Literature Review </strong>
:::

------------------------------------------------------------------------

<left> ![](https://432f5d.mannesoftprime.com.br/processo_seletivo/imagens/logo_puc.png){width="20%"} </left>

------------------------------------------------------------------------

<center>

<p >

```{=html}
<p style="font-family: times, serif; font-size:11pt; font-style:italic"; class="comment">


Keywords used: "Portfolio Multiobjective" (vice-versa), 


</p>
```
<p >

```{=html}
<p style="font-family: times, serif; font-size:11pt; font-style:italic"; class="comment">

An small abstract

</center>
</p>
```

------------------------------------------------------------------------

# Systematic Literature Review Criteria

-   <mark>***Keywords searched***</mark> $\Rightarrow$ `"Multiobjective Portfolio"`, `"Portfolio Multiobjective"`, `"Portfolio Selection Multiobjective"`, `"Multi period portfolio multiobjective"`

-   <mark>***Max results searched***<mark> $\Rightarrow$ 1000 (to be reduced, obviously)

-   <mark>***published.print***<mark> $\Rightarrow$ \>= year 2020

-   <mark>***is.referenced.by.count***<mark> $\Rightarrow$ is.referenced.by.count ordered by most for the minimum

-   <mark>***score***</mark> $\Rightarrow$ In descendant order

# R packages

```{r}

library(dplyr)
library(rcrossref)
library(fpp3)
library(tidyr)
library(purrr)
library(scholar)
library(ggplot2)
library(plotly)
library(tidyverse)

```

## Keyword: "Multiobjective Portfolio"

```{r}

# Realizar a busca por artigos contendo a palavra-chave "Multiobjective Portfolio"
results <- cr_works(query = "Multiobjective Portfolio", limit = 1000)$data # Max is 1000 searches


cat("Show all features avaiable in selected keywords... \n")

# Exibir os resultados da busca
glimpse(results)


```

Now showing only selected columns for the table (dataframe) necessary:

```{r eval=FALSE }

results <- results |> 
  mutate(author_expand = map(author, ~as.character(.x))) |> 
  unnest(author_expand) |>
  mutate(author_expand = gsub("c\\(\"|\"\\)", "", author_expand))
         
results <- results |> 
  mutate(link_expand = map(link, ~as.character(.x))) |> 
  unnest(link_expand)

```

```{r}

results <- results |> 
  select(
    title,
    author,
    type,
    url,
    container.title,
    short.container.title,
    publisher,
    doi,
    published.print,
    score,
    reference.count,
    is.referenced.by.count,
    link,
    reference,
    abstract,
    issn
) |>
  mutate(
    score = as.numeric(score),
    published.print = coalesce(published.print, "1900-01"), # substitui NAs por "1900-01"
    published.print = yearmonth( published.print )
  ) |>
  filter(
    year(published.print) >= 2020
  ) |> 
  distinct()

```

Showing the results in a table:

```{r}

Multiobjective_Portfolio <- results |> 
  arrange( desc(score), desc(is.referenced.by.count) ) |> 
  distinct() |> 
  filter(title != "Front Matter", 
         title != "Cover",
         title != "Books Received")

Multiobjective_Portfolio

```

## Keyword: "Portfolio Selection Multiobjective"

```{r}

# Realizar a busca por artigos contendo a palavra-chave "Multiobjective Portfolio"
results <- cr_works(query = "Portfolio Selection Multiobjective", limit = 1000)$data # Max is 1000 searches

```

Now showing only selected columns for the table (dataframe) necessary:

```{r eval=FALSE }

results <- results |> 
  mutate(author_expand = map(author, ~as.character(.x))) |> 
  unnest(author_expand) |>
  mutate(author_expand = gsub("c\\(\"|\"\\)", "", author_expand))
         
results <- results |> 
  mutate(link_expand = map(link, ~as.character(.x))) |> 
  unnest(link_expand)

```

```{r}

results <- results |> 
  select(
    title,
    author,
    type,
    url,
    container.title,
    short.container.title,
    publisher,
    doi,
    published.print,
    score,
    reference.count,
    is.referenced.by.count,
    link,
    reference,
    abstract,
    issn
) |>
  mutate(
    score = as.numeric(score),
    published.print = coalesce(published.print, "1900-01"), # substitui NAs por "1900-01"
    published.print = yearmonth( published.print )
  ) |>
  filter(
    year(published.print) >= 2020
  ) |> 
  distinct()

```

Showing the results in a table:

```{r}

Portfolio_Selection_Multiobjective <- results |> arrange( desc(score), desc(is.referenced.by.count) ) |> distinct()

Portfolio_Selection_Multiobjective

```

## Keyword: "Multi period portfolio multiobjective"

```{r}

# Realizar a busca por artigos contendo a palavra-chave "Multiobjective Portfolio"
results <- cr_works(query = "Multi period portfolio multiobjective", limit = 1000)$data # Max is 1000 searches

```

Now showing only selected columns for the table (dataframe) necessary:

```{r eval=FALSE }

results <- results |> 
  mutate(author_expand = map(author, ~as.character(.x))) |> 
  unnest(author_expand) |>
  mutate(author_expand = gsub("c\\(\"|\"\\)", "", author_expand))
         
results <- results |> 
  mutate(link_expand = map(link, ~as.character(.x))) |> 
  unnest(link_expand)

```

```{r}

results <- results |> 
  select(
    title,
    author,
    type,
    url,
    container.title,
    short.container.title,
    publisher,
    doi,
    published.print,
    score,
    reference.count,
    is.referenced.by.count,
    link,
    reference,
    abstract,
    issn
) |>
  mutate(
    score = as.numeric(score),
    published.print = coalesce(published.print, "1900-01"), # substitui NAs por "1900-01"
    published.print = yearmonth( published.print )
  ) |>
  filter(
    year(published.print) >= 2020
  ) |> 
  distinct()

```

Showing the results in a table:

```{r}

Multi_period_portfolio_multiobjective <- results |> 
  arrange( desc(score), desc(is.referenced.by.count) ) |> distinct()

Multi_period_portfolio_multiobjective

```

## Final dataframe

```{r}


Final_df <- bind_rows(
  Multiobjective_Portfolio,
  Portfolio_Selection_Multiobjective,
  Multi_period_portfolio_multiobjective
) |> 
  arrange( desc(title), desc(score) ) |> 
  distinct()


glimpse(Final_df)

```

```{r}

Final_df_unique <- Final_df %>%
  distinct(title, doi, .keep_all = TRUE)

glimpse(Final_df_unique)

Final_df_unique

```

By expanding the author names columns:

```{r}

# Unnest the author column
Final_df_unique_expanded <- Final_df_unique %>%
  unnest(author) %>%
  select(title, given, family)

# Rename the author name columns
Final_df_unique_expanded <- Final_df_unique_expanded %>%
  rename(Author_First_Name = given, Author_Last_Name = family)

# Print the expanded data frame
print(Final_df_unique_expanded)

```

Now inserting the authors name in a new df

```{r}
 
authors_df <- Final_df_unique_expanded |>
  group_by(title) %>%
  summarise(Author_Names = paste(Author_First_Name, Author_Last_Name, collapse = "; ")) %>%
  ungroup()

print(authors_df)

```



Author(s)

```{r }

df_author <- Final_df_unique |>
  select(title,
         author) |>
  unnest(cols = author)

glimpse(df_author)

print(df_author)

```

Links

```{r eval=FALSE }

df_link <- Final_df |>
  select(
    title,
    link
  ) |>
  unnest(
    cols = link
  )

glimpse(df_link)

```

References

```{r eval=FALSE }

df_references <- Final_df |>
  select(
    title,
    reference
  ) |>
  unnest(
    cols = reference
  )

glimpse(df_references)

```

------------------------------------------------------------------------

# AuthorÂ´s relevance

## Frank Fabozzi

Scholar link <https://scholar.google.com/citations?user=tqXS4IMAAAAJ&hl=en>

```{r}

## Define the id for Frank Fabozzi
id <- 'tqXS4IMAAAAJ'

## Get his profile
l <- get_profile(id)

## Print his name and affliation
l$name

l$affiliation

```

```{r}

## Print his citation index
l$h_index

l$i10_index

```

Retrieving publications

```{r}

## Get his publications (a large data frame)
p <- get_publications(id)
p

```

Retrieving citation data

```{r fig.width=9}

## Get his citation history, i.e. citations to his work in a given year
ct <- get_citation_history(id)

## Plot citation trend
ggplotly(
ggplot(ct, aes(year, cites)) + geom_line() + geom_point()
)

```

Users can retrieve the citation history of a particular publication with `get_article_cite_history()`.

```{r}

## The following publication will be used to demonstrate article citation history
as.character(p$title[6])

```

```{r}

## Get article citation history
ach <- get_article_cite_history(id, p$pubid[6])

## Plot citation trend
plotly::ggplotly(
ggplot(ach, aes(year, cites)) +
    geom_segment(aes(xend = year, yend = 0), size=1, color='darkgrey') +
    geom_point(size=3, color='firebrick')
)

```

Comparing scholars

You can compare the citation history of scholars by fetching data with compare_scholars.

```{r}

# Compare Fabozzi and David Ardia
ids <- c('tqXS4IMAAAAJ', 'BPNrOUYAAAAJ')

# Get a data frame comparing the number of citations to their work in
# a given year
cs <- compare_scholars(ids)

## remove some 'bad' records without sufficient information
cs <- subset(cs, !is.na(year) & year > 2000)

plotly::ggplotly(
ggplot(cs, aes(year, cites, group=name, color=name)) + geom_line() + theme(legend.position="bottom")
)

```

```{r}

## Compare their career trajectories, based on year of first citation
csc <- compare_scholar_careers(ids)

plotly::ggplotly(
ggplot(csc, aes(career_year, cites, group=name, color=name)) + geom_line() + geom_point() +
    theme(legend.position=c(.2, .8))
)

```

Visualizing and comparing network of coauthors

```{r}


coautorias <- 'BPNrOUYAAAAJ&hl'
get_profile(coautorias)$name

get_profile('BPNrOUYAAAAJ')$name


# Be careful with specifying too many coauthors as the visualization of the
# network can get very messy.
coauthor_network <- get_coauthors('BPNrOUYAAAAJ&hl', n_coauthors = 7)

coauthor_network

```

And then we have a built-in function to plot this visualization.

```{r}

plot_coauthors(coauthor_network)

```

## Duan Li

Scholar link <https://scholar.google.com/citations?user=e0IkYKcAAAAJ&hl=en>

```{r}

## Define the id for Duan Li
id <- 'e0IkYKcAAAAJ'

## Get his profile
l <- get_profile(id)

## Print his name and affliation
l$name

l$affiliation

```

```{r}

## Print his citation index
l$h_index

l$i10_index

```

Retrieving publications

```{r}

## Get his publications (a large data frame)
p <- get_publications(id)
p

```

Retrieving citation data

```{r fig.width=9}

## Get his citation history, i.e. citations to his work in a given year
ct <- get_citation_history(id)

## Plot citation trend
ggplotly(
ggplot(ct, aes(year, cites)) + geom_line() + geom_point()
)

```

Users can retrieve the citation history of a particular publication with `get_article_cite_history()`.

```{r}

## The following publication will be used to demonstrate article citation history
as.character(p$title[1])

```

```{r}

## Get article citation history
ach <- get_article_cite_history(id, p$pubid[1])

## Plot citation trend
plotly::ggplotly(
ggplot(ach, aes(year, cites)) +
    geom_segment(aes(xend = year, yend = 0), size=1, color='darkgrey') +
    geom_point(size=3, color='firebrick')
)

```

Comparing scholars

You can compare the citation history of scholars by fetching data with compare_scholars.

```{r}

# Compare Fabozzi and Duan Li
ids <- c('tqXS4IMAAAAJ', 'e0IkYKcAAAAJ')

# Get a data frame comparing the number of citations to their work in
# a given year
cs <- compare_scholars(ids)

## remove some 'bad' records without sufficient information
cs <- subset(cs, !is.na(year) & year > 2000)

plotly::ggplotly(
ggplot(cs, aes(year, cites, group=name, color=name)) + geom_line() + theme(legend.position="bottom")
)

```

```{r}

## Compare their career trajectories, based on year of first citation
csc <- compare_scholar_careers(ids)

plotly::ggplotly(
ggplot(csc, aes(career_year, cites, group=name, color=name)) + geom_line() + geom_point() +
    theme(legend.position=c(.2, .8))
)

```

Visualizing and comparing network of coauthors

```{r}

coautorias <- 'e0IkYKcAAAAJ&hl'
get_profile(coautorias)$name

get_profile('e0IkYKcAAAAJ')$name


# Be careful with specifying too many coauthors as the visualization of the
# network can get very messy.
coauthor_network <- get_coauthors('e0IkYKcAAAAJ&hl', n_coauthors = 7)

coauthor_network

```

And then we have a built-in function to plot this visualization.

```{r}

plot_coauthors(coauthor_network)

```

## Woo Chang Kim

Scholar link <https://scholar.google.com/citations?user=e0IkYKcAAAAJ&hl=en>

```{r}

## Define the id for Woo Chang Kim
id <- '7NmBs1kAAAAJ'

## Get his profile
l <- get_profile(id)

## Print his name and affliation
l$name

l$affiliation

```

```{r}

## Print his citation index
l$h_index

l$i10_index

```

Retrieving publications

```{r}

## Get his publications (a large data frame)
p <- get_publications(id)
p

```

Retrieving citation data

```{r fig.width=9}

## Get his citation history, i.e. citations to his work in a given year
ct <- get_citation_history(id)

## Plot citation trend
ggplotly(
ggplot(ct, aes(year, cites)) + geom_line() + geom_point()
)

```

Users can retrieve the citation history of a particular publication with `get_article_cite_history()`.

```{r}

## The following publication will be used to demonstrate article citation history
as.character(p$title[1])

```

```{r}

## Get article citation history
ach <- get_article_cite_history(id, p$pubid[1])

## Plot citation trend
plotly::ggplotly(
ggplot(ach, aes(year, cites)) +
    geom_segment(aes(xend = year, yend = 0), size=1, color='darkgrey') +
    geom_point(size=3, color='firebrick')
)

```

Comparing scholars

You can compare the citation history of scholars by fetching data with compare_scholars.

```{r}

# Compare Fabozzi and Woo Chang Kim
ids <- c('tqXS4IMAAAAJ', '7NmBs1kAAAAJ')

# Get a data frame comparing the number of citations to their work in
# a given year
cs <- compare_scholars(ids)

## remove some 'bad' records without sufficient information
cs <- subset(cs, !is.na(year) & year > 2000)

plotly::ggplotly(
ggplot(cs, aes(year, cites, group=name, color=name)) + geom_line() + theme(legend.position="bottom")
)

```

```{r}

## Compare their career trajectories, based on year of first citation
csc <- compare_scholar_careers(ids)

plotly::ggplotly(
ggplot(csc, aes(career_year, cites, group=name, color=name)) + geom_line() + geom_point() +
    theme(legend.position=c(.2, .8))
)

```

Visualizing and comparing network of coauthors

```{r}

coautorias <- '7NmBs1kAAAAJ&hl'
get_profile(coautorias)$name

get_profile('7NmBs1kAAAAJ')$name


# Be careful with specifying too many coauthors as the visualization of the
# network can get very messy.
coauthor_network <- get_coauthors('7NmBs1kAAAAJ&hl', n_coauthors = 7)

coauthor_network

```

And then we have a built-in function to plot this visualization.

```{r}

plot_coauthors(coauthor_network)

```

## David Ardia

Scholar link <https://scholar.google.com/citations?hl=en&user=BPNrOUYAAAAJ>

```{r}

## Define the id for David Ardia
id <- 'BPNrOUYAAAAJ'

## Get his profile
l <- get_profile(id)

## Print his name and affliation
l$name

l$affiliation

```

```{r}

## Print his citation index
l$h_index

l$i10_index

```

Retrieving publications

```{r}

## Get his publications (a large data frame)
p <- get_publications(id)
p

```

Retrieving citation data

```{r fig.width=9}

## Get his citation history, i.e. citations to his work in a given year
ct <- get_citation_history(id)

## Plot citation trend
ggplotly(
ggplot(ct, aes(year, cites)) + geom_line() + geom_point()
)

```

Users can retrieve the citation history of a particular publication with `get_article_cite_history()`.

```{r}

## The following publication will be used to demonstrate article citation history
as.character(p$title[1])

```

```{r}

## Get article citation history
ach <- get_article_cite_history(id, p$pubid[1])

## Plot citation trend
plotly::ggplotly(
ggplot(ach, aes(year, cites)) +
    geom_segment(aes(xend = year, yend = 0), size=1, color='darkgrey') +
    geom_point(size=3, color='firebrick')
)

```

Comparing scholars

You can compare the citation history of scholars by fetching data with compare_scholars.

```{r}

# Compare Fabozzi and David Ardia
ids <- c('tqXS4IMAAAAJ', 'BPNrOUYAAAAJ')

# Get a data frame comparing the number of citations to their work in
# a given year
cs <- compare_scholars(ids)

## remove some 'bad' records without sufficient information
cs <- subset(cs, !is.na(year) & year > 2000)

plotly::ggplotly(
ggplot(cs, aes(year, cites, group=name, color=name)) + geom_line() + theme(legend.position="bottom")
)

```

```{r}

## Compare their career trajectories, based on year of first citation
csc <- compare_scholar_careers(ids)

plotly::ggplotly(
ggplot(csc, aes(career_year, cites, group=name, color=name)) + geom_line() + geom_point() +
    theme(legend.position=c(.2, .8))
)

```

Visualizing and comparing network of coauthors

```{r}

coautorias <- 'BPNrOUYAAAAJ&hl'
get_profile(coautorias)$name

get_profile('BPNrOUYAAAAJ')$name


# Be careful with specifying too many coauthors as the visualization of the
# network can get very messy.
coauthor_network <- get_coauthors('BPNrOUYAAAAJ&hl', n_coauthors = 7)

coauthor_network

```

And then we have a built-in function to plot this visualization.

```{r}

plot_coauthors(coauthor_network)

```

## Herman Koene Van Dijk

Scholar link <https://scholar.google.com/citations?user=8y5_FWQAAAAJ&hl=en>

```{r eval=FALSE }

## Define the id for Herman Koene Van Dijk
id <- 'FWQAAAAJ'

## Get his profile
l <- get_profile(id)

## Print his name and affliation
l$name

l$affiliation

```

```{r eval=FALSE }

## Print his citation index
l$h_index

l$i10_index

```

Retrieving publications

```{r eval=FALSE }

## Get his publications (a large data frame)
p <- get_publications(id)
p

```

Retrieving citation data

```{r fig.width=9, eval=FALSE }

## Get his citation history, i.e. citations to his work in a given year
ct <- get_citation_history(id)

## Plot citation trend
ggplotly(
ggplot(ct, aes(year, cites)) + geom_line() + geom_point()
)

```

Users can retrieve the citation history of a particular publication with `get_article_cite_history()`.

```{r, eval=FALSE }

## The following publication will be used to demonstrate article citation history
as.character(p$title[1])

```

```{r eval=FALSE }

## Get article citation history
ach <- get_article_cite_history(id, p$pubid[1])

## Plot citation trend
plotly::ggplotly(
ggplot(ach, aes(year, cites)) +
    geom_segment(aes(xend = year, yend = 0), size=1, color='darkgrey') +
    geom_point(size=3, color='firebrick')
)

```

Comparing scholars

You can compare the citation history of scholars by fetching data with compare_scholars.

```{r, eval=FALSE }

# Compare Fabozzi and Herman Van Dijk
ids <- c('tqXS4IMAAAAJ', 'FWQAAAAJ')

# Get a data frame comparing the number of citations to their work in
# a given year
cs <- compare_scholars(ids)

## remove some 'bad' records without sufficient information
cs <- subset(cs, !is.na(year) & year > 2000)

plotly::ggplotly(
ggplot(cs, aes(year, cites, group=name, color=name)) + geom_line() + theme(legend.position="bottom")
)

```

```{r, eval=FALSE }

## Compare their career trajectories, based on year of first citation
csc <- compare_scholar_careers(ids)

plotly::ggplotly(
ggplot(csc, aes(career_year, cites, group=name, color=name)) + geom_line() + geom_point() +
    theme(legend.position=c(.2, .8))
)

```

Visualizing and comparing network of coauthors

```{r eval=FALSE }

coautorias <- 'FWQAAAAJ&hl'
get_profile(coautorias)$name

get_profile('FWQAAAAJ')$name


# Be careful with specifying too many coauthors as the visualization of the
# network can get very messy.
coauthor_network <- get_coauthors('FWQAAAAJ&hl', n_coauthors = 7)

coauthor_network

```

And then we have a built-in function to plot this visualization.

```{r eval=FALSE }

plot_coauthors(coauthor_network)

```

## Bernhard Pfaff

-   GitHub <https://github.com/bpfaff/>

-   Scholar <https://scholar.google.com.br/scholar?q=bernhard+pfaff&hl=pt-BR&as_sdt=0&as_vis=1&oi=scholart>

Â 

Â 

------------------------------------------------------------------------

# References

------------------------------------------------------------------------

```{r}

citation(package = "rcrossref")

citation(package = "scholar")

```
